// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.0
// source: ng_driver.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExtensionType int32

const (
	ExtensionType_EXTENSION_TYPE_UNSPECIFIED ExtensionType = 0
	ExtensionType_STRING                     ExtensionType = 1
	ExtensionType_INT                        ExtensionType = 2
	ExtensionType_FLOAT                      ExtensionType = 3
	ExtensionType_BOOL                       ExtensionType = 4
	ExtensionType_STRING_ARRAY               ExtensionType = 5
	ExtensionType_INTEGER_ARRAY              ExtensionType = 6
	ExtensionType_FLOAT_ARRAY                ExtensionType = 7
	ExtensionType_BOOLEAN_ARRAY              ExtensionType = 8
	ExtensionType_ENUM                       ExtensionType = 9
	ExtensionType_ENUM_ARRAY                 ExtensionType = 10
)

// Enum value maps for ExtensionType.
var (
	ExtensionType_name = map[int32]string{
		0:  "EXTENSION_TYPE_UNSPECIFIED",
		1:  "STRING",
		2:  "INT",
		3:  "FLOAT",
		4:  "BOOL",
		5:  "STRING_ARRAY",
		6:  "INTEGER_ARRAY",
		7:  "FLOAT_ARRAY",
		8:  "BOOLEAN_ARRAY",
		9:  "ENUM",
		10: "ENUM_ARRAY",
	}
	ExtensionType_value = map[string]int32{
		"EXTENSION_TYPE_UNSPECIFIED": 0,
		"STRING":                     1,
		"INT":                        2,
		"FLOAT":                      3,
		"BOOL":                       4,
		"STRING_ARRAY":               5,
		"INTEGER_ARRAY":              6,
		"FLOAT_ARRAY":                7,
		"BOOLEAN_ARRAY":              8,
		"ENUM":                       9,
		"ENUM_ARRAY":                 10,
	}
)

func (x ExtensionType) Enum() *ExtensionType {
	p := new(ExtensionType)
	*p = x
	return p
}

func (x ExtensionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ng_driver_proto_enumTypes[0].Descriptor()
}

func (ExtensionType) Type() protoreflect.EnumType {
	return &file_ng_driver_proto_enumTypes[0]
}

func (x ExtensionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionType.Descriptor instead.
func (ExtensionType) EnumDescriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{0}
}

type Operator int32

const (
	Operator_OPERATOR_UNSPECIFIED Operator = 0
	Operator_EQ                   Operator = 1
	Operator_NEQ                  Operator = 2
	Operator_GT                   Operator = 3
	Operator_GTE                  Operator = 4
	Operator_LT                   Operator = 5
	Operator_LTE                  Operator = 6
	Operator_CONTAINS             Operator = 7
	Operator_PREFIX               Operator = 8
	Operator_SUFFIX               Operator = 9
	Operator_REGEX                Operator = 10
	Operator_IN                   Operator = 11
	Operator_NOT_IN               Operator = 12
	Operator_BETWEEN              Operator = 13
	Operator_NOT_BETWEEN          Operator = 14
	Operator_NOT_NULL             Operator = 15
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "OPERATOR_UNSPECIFIED",
		1:  "EQ",
		2:  "NEQ",
		3:  "GT",
		4:  "GTE",
		5:  "LT",
		6:  "LTE",
		7:  "CONTAINS",
		8:  "PREFIX",
		9:  "SUFFIX",
		10: "REGEX",
		11: "IN",
		12: "NOT_IN",
		13: "BETWEEN",
		14: "NOT_BETWEEN",
		15: "NOT_NULL",
	}
	Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"EQ":                   1,
		"NEQ":                  2,
		"GT":                   3,
		"GTE":                  4,
		"LT":                   5,
		"LTE":                  6,
		"CONTAINS":             7,
		"PREFIX":               8,
		"SUFFIX":               9,
		"REGEX":                10,
		"IN":                   11,
		"NOT_IN":               12,
		"BETWEEN":              13,
		"NOT_BETWEEN":          14,
		"NOT_NULL":             15,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_ng_driver_proto_enumTypes[1].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_ng_driver_proto_enumTypes[1]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{1}
}

type ConditionType int32

const (
	ConditionType_CONDITION_TYPE_UNSPECIFIED ConditionType = 0
	ConditionType_AND                        ConditionType = 1
	ConditionType_OR                         ConditionType = 2
)

// Enum value maps for ConditionType.
var (
	ConditionType_name = map[int32]string{
		0: "CONDITION_TYPE_UNSPECIFIED",
		1: "AND",
		2: "OR",
	}
	ConditionType_value = map[string]int32{
		"CONDITION_TYPE_UNSPECIFIED": 0,
		"AND":                        1,
		"OR":                         2,
	}
)

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ng_driver_proto_enumTypes[2].Descriptor()
}

func (ConditionType) Type() protoreflect.EnumType {
	return &file_ng_driver_proto_enumTypes[2]
}

func (x ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionType.Descriptor instead.
func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{2}
}

type EnumValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Key   string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*EnumValue_StringValue
	//	*EnumValue_IntValue
	//	*EnumValue_FloatValue
	//	*EnumValue_BoolValue
	Value         isEnumValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumValue) Reset() {
	*x = EnumValue{}
	mi := &file_ng_driver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValue) ProtoMessage() {}

func (x *EnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValue.ProtoReflect.Descriptor instead.
func (*EnumValue) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{0}
}

func (x *EnumValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EnumValue) GetValue() isEnumValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EnumValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*EnumValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *EnumValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*EnumValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *EnumValue) GetFloatValue() float32 {
	if x != nil {
		if x, ok := x.Value.(*EnumValue_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *EnumValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*EnumValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

type isEnumValue_Value interface {
	isEnumValue_Value()
}

type EnumValue_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=stringValue,proto3,oneof"`
}

type EnumValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"`
}

type EnumValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,4,opt,name=floatValue,proto3,oneof"`
}

type EnumValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=boolValue,proto3,oneof"`
}

func (*EnumValue_StringValue) isEnumValue_Value() {}

func (*EnumValue_IntValue) isEnumValue_Value() {}

func (*EnumValue_FloatValue) isEnumValue_Value() {}

func (*EnumValue_BoolValue) isEnumValue_Value() {}

type EnumArrayType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*EnumValue           `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumArrayType) Reset() {
	*x = EnumArrayType{}
	mi := &file_ng_driver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumArrayType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumArrayType) ProtoMessage() {}

func (x *EnumArrayType) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumArrayType.ProtoReflect.Descriptor instead.
func (*EnumArrayType) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{1}
}

func (x *EnumArrayType) GetValues() []*EnumValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type StringArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	mi := &file_ng_driver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{2}
}

func (x *StringArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type IntArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int64                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntArray) Reset() {
	*x = IntArray{}
	mi := &file_ng_driver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArray) ProtoMessage() {}

func (x *IntArray) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArray.ProtoReflect.Descriptor instead.
func (*IntArray) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{3}
}

func (x *IntArray) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FloatArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []float32              `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatArray) Reset() {
	*x = FloatArray{}
	mi := &file_ng_driver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatArray) ProtoMessage() {}

func (x *FloatArray) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatArray.ProtoReflect.Descriptor instead.
func (*FloatArray) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{4}
}

func (x *FloatArray) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type BoolArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []bool                 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolArray) Reset() {
	*x = BoolArray{}
	mi := &file_ng_driver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolArray) ProtoMessage() {}

func (x *BoolArray) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolArray.ProtoReflect.Descriptor instead.
func (*BoolArray) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{5}
}

func (x *BoolArray) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type Condition struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Type     ConditionType          `protobuf:"varint,1,opt,name=type,proto3,enum=ng_proto.ConditionType" json:"type,omitempty"`
	Operator Operator               `protobuf:"varint,2,opt,name=operator,proto3,enum=ng_proto.Operator" json:"operator,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*Condition_StringValue
	//	*Condition_IntValue
	//	*Condition_FloatValue
	//	*Condition_BoolValue
	//	*Condition_StringArray
	//	*Condition_IntArray
	//	*Condition_FloatArray
	//	*Condition_BoolArray
	Value         isCondition_Value `protobuf_oneof:"value"`
	SubConditions []*Condition      `protobuf:"bytes,11,rep,name=subConditions,proto3" json:"subConditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_ng_driver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{6}
}

func (x *Condition) GetType() ConditionType {
	if x != nil {
		return x.Type
	}
	return ConditionType_CONDITION_TYPE_UNSPECIFIED
}

func (x *Condition) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_OPERATOR_UNSPECIFIED
}

func (x *Condition) GetValue() isCondition_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Condition) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*Condition_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *Condition) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*Condition_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *Condition) GetFloatValue() float32 {
	if x != nil {
		if x, ok := x.Value.(*Condition_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *Condition) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*Condition_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *Condition) GetStringArray() *StringArray {
	if x != nil {
		if x, ok := x.Value.(*Condition_StringArray); ok {
			return x.StringArray
		}
	}
	return nil
}

func (x *Condition) GetIntArray() *IntArray {
	if x != nil {
		if x, ok := x.Value.(*Condition_IntArray); ok {
			return x.IntArray
		}
	}
	return nil
}

func (x *Condition) GetFloatArray() *FloatArray {
	if x != nil {
		if x, ok := x.Value.(*Condition_FloatArray); ok {
			return x.FloatArray
		}
	}
	return nil
}

func (x *Condition) GetBoolArray() *BoolArray {
	if x != nil {
		if x, ok := x.Value.(*Condition_BoolArray); ok {
			return x.BoolArray
		}
	}
	return nil
}

func (x *Condition) GetSubConditions() []*Condition {
	if x != nil {
		return x.SubConditions
	}
	return nil
}

type isCondition_Value interface {
	isCondition_Value()
}

type Condition_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=stringValue,proto3,oneof"`
}

type Condition_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=intValue,proto3,oneof"`
}

type Condition_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"`
}

type Condition_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=boolValue,proto3,oneof"`
}

type Condition_StringArray struct {
	StringArray *StringArray `protobuf:"bytes,7,opt,name=stringArray,proto3,oneof"`
}

type Condition_IntArray struct {
	IntArray *IntArray `protobuf:"bytes,8,opt,name=intArray,proto3,oneof"`
}

type Condition_FloatArray struct {
	FloatArray *FloatArray `protobuf:"bytes,9,opt,name=floatArray,proto3,oneof"`
}

type Condition_BoolArray struct {
	BoolArray *BoolArray `protobuf:"bytes,10,opt,name=boolArray,proto3,oneof"`
}

func (*Condition_StringValue) isCondition_Value() {}

func (*Condition_IntValue) isCondition_Value() {}

func (*Condition_FloatValue) isCondition_Value() {}

func (*Condition_BoolValue) isCondition_Value() {}

func (*Condition_StringArray) isCondition_Value() {}

func (*Condition_IntArray) isCondition_Value() {}

func (*Condition_FloatArray) isCondition_Value() {}

func (*Condition_BoolArray) isCondition_Value() {}

type Extension struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Label         string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Type          ExtensionType          `protobuf:"varint,3,opt,name=type,proto3,enum=ng_proto.ExtensionType" json:"type,omitempty"`
	EnumInfo      []*EnumValue           `protobuf:"bytes,4,rep,name=enumInfo,proto3" json:"enumInfo,omitempty"`
	Conditions    []*Condition           `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Required      bool                   `protobuf:"varint,6,opt,name=required,proto3" json:"required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Extension) Reset() {
	*x = Extension{}
	mi := &file_ng_driver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{7}
}

func (x *Extension) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Extension) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Extension) GetType() ExtensionType {
	if x != nil {
		return x.Type
	}
	return ExtensionType_EXTENSION_TYPE_UNSPECIFIED
}

func (x *Extension) GetEnumInfo() []*EnumValue {
	if x != nil {
		return x.EnumInfo
	}
	return nil
}

func (x *Extension) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Extension) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type DriverMetadata struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code                string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description         string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version             string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Extensions          []*Extension           `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty"`
	DataPointExtensions []*Extension           `protobuf:"bytes,6,rep,name=dataPointExtensions,proto3" json:"dataPointExtensions,omitempty"`
	ActionExtensions    []*Extension           `protobuf:"bytes,7,rep,name=actionExtensions,proto3" json:"actionExtensions,omitempty"`
	EventExtensions     []*Extension           `protobuf:"bytes,8,rep,name=eventExtensions,proto3" json:"eventExtensions,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DriverMetadata) Reset() {
	*x = DriverMetadata{}
	mi := &file_ng_driver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverMetadata) ProtoMessage() {}

func (x *DriverMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ng_driver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverMetadata.ProtoReflect.Descriptor instead.
func (*DriverMetadata) Descriptor() ([]byte, []int) {
	return file_ng_driver_proto_rawDescGZIP(), []int{8}
}

func (x *DriverMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DriverMetadata) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DriverMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DriverMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DriverMetadata) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *DriverMetadata) GetDataPointExtensions() []*Extension {
	if x != nil {
		return x.DataPointExtensions
	}
	return nil
}

func (x *DriverMetadata) GetActionExtensions() []*Extension {
	if x != nil {
		return x.ActionExtensions
	}
	return nil
}

func (x *DriverMetadata) GetEventExtensions() []*Extension {
	if x != nil {
		return x.EventExtensions
	}
	return nil
}

var File_ng_driver_proto protoreflect.FileDescriptor

var file_ng_driver_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x09,
	0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x22, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x24, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x8a, 0x04, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x33, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45,
	0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0xbc, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x5f, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f,
	0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4c, 0x45,
	0x41, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e,
	0x55, 0x4d, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x10, 0x0a, 0x2a, 0xc8, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45,
	0x51, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x47, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a,
	0x02, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x58, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x0a, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x0d,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10,
	0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x0f, 0x2a,
	0x40, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10,
	0x02, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ng_driver_proto_rawDescOnce sync.Once
	file_ng_driver_proto_rawDescData = file_ng_driver_proto_rawDesc
)

func file_ng_driver_proto_rawDescGZIP() []byte {
	file_ng_driver_proto_rawDescOnce.Do(func() {
		file_ng_driver_proto_rawDescData = protoimpl.X.CompressGZIP(file_ng_driver_proto_rawDescData)
	})
	return file_ng_driver_proto_rawDescData
}

var file_ng_driver_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ng_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ng_driver_proto_goTypes = []any{
	(ExtensionType)(0),     // 0: ng_proto.ExtensionType
	(Operator)(0),          // 1: ng_proto.Operator
	(ConditionType)(0),     // 2: ng_proto.ConditionType
	(*EnumValue)(nil),      // 3: ng_proto.EnumValue
	(*EnumArrayType)(nil),  // 4: ng_proto.EnumArrayType
	(*StringArray)(nil),    // 5: ng_proto.StringArray
	(*IntArray)(nil),       // 6: ng_proto.IntArray
	(*FloatArray)(nil),     // 7: ng_proto.FloatArray
	(*BoolArray)(nil),      // 8: ng_proto.BoolArray
	(*Condition)(nil),      // 9: ng_proto.Condition
	(*Extension)(nil),      // 10: ng_proto.Extension
	(*DriverMetadata)(nil), // 11: ng_proto.DriverMetadata
}
var file_ng_driver_proto_depIdxs = []int32{
	3,  // 0: ng_proto.EnumArrayType.values:type_name -> ng_proto.EnumValue
	2,  // 1: ng_proto.Condition.type:type_name -> ng_proto.ConditionType
	1,  // 2: ng_proto.Condition.operator:type_name -> ng_proto.Operator
	5,  // 3: ng_proto.Condition.stringArray:type_name -> ng_proto.StringArray
	6,  // 4: ng_proto.Condition.intArray:type_name -> ng_proto.IntArray
	7,  // 5: ng_proto.Condition.floatArray:type_name -> ng_proto.FloatArray
	8,  // 6: ng_proto.Condition.boolArray:type_name -> ng_proto.BoolArray
	9,  // 7: ng_proto.Condition.subConditions:type_name -> ng_proto.Condition
	0,  // 8: ng_proto.Extension.type:type_name -> ng_proto.ExtensionType
	3,  // 9: ng_proto.Extension.enumInfo:type_name -> ng_proto.EnumValue
	9,  // 10: ng_proto.Extension.conditions:type_name -> ng_proto.Condition
	10, // 11: ng_proto.DriverMetadata.extensions:type_name -> ng_proto.Extension
	10, // 12: ng_proto.DriverMetadata.dataPointExtensions:type_name -> ng_proto.Extension
	10, // 13: ng_proto.DriverMetadata.actionExtensions:type_name -> ng_proto.Extension
	10, // 14: ng_proto.DriverMetadata.eventExtensions:type_name -> ng_proto.Extension
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ng_driver_proto_init() }
func file_ng_driver_proto_init() {
	if File_ng_driver_proto != nil {
		return
	}
	file_ng_driver_proto_msgTypes[0].OneofWrappers = []any{
		(*EnumValue_StringValue)(nil),
		(*EnumValue_IntValue)(nil),
		(*EnumValue_FloatValue)(nil),
		(*EnumValue_BoolValue)(nil),
	}
	file_ng_driver_proto_msgTypes[6].OneofWrappers = []any{
		(*Condition_StringValue)(nil),
		(*Condition_IntValue)(nil),
		(*Condition_FloatValue)(nil),
		(*Condition_BoolValue)(nil),
		(*Condition_StringArray)(nil),
		(*Condition_IntArray)(nil),
		(*Condition_FloatArray)(nil),
		(*Condition_BoolArray)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ng_driver_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ng_driver_proto_goTypes,
		DependencyIndexes: file_ng_driver_proto_depIdxs,
		EnumInfos:         file_ng_driver_proto_enumTypes,
		MessageInfos:      file_ng_driver_proto_msgTypes,
	}.Build()
	File_ng_driver_proto = out.File
	file_ng_driver_proto_rawDesc = nil
	file_ng_driver_proto_goTypes = nil
	file_ng_driver_proto_depIdxs = nil
}
